Microsoft (R) Macro Assembler (x64) Version 14.00.24210.0   11/11/16 12:02:39
TestAsm.asm						     Page 1 - 1


				; The MIT License (MIT)

				; Copyright (c) 2016, Microsoft

				; Permission is hereby granted, free of charge, to any person obtaining a copy
				; of this software and associated documentation files (the "Software"), to deal
				; in the Software without restriction, including without limitation the rights
				; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
				; copies of the Software, and to permit persons to whom the Software is
				; furnished to do so, subject to the following conditions:

				; The above copyright notice and this permission notice shall be included in
				; all copies or substantial portions of the Software.

				; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
				; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
				; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
				; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
				; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
				; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
				; THE SOFTWARE.

				; Description:
				; 
				; Revision date:

 00000000			.data
 00000000 4D 41 53 4D 20	myMessage BYTE "MASM program example",0dh,0ah,0
	   70 72 6F 67 72
	   61 6D 20 65 78
	   61 6D 70 6C 65
	   0D 0A 00

 00000000			.code
 00000000			main PROC

 00000000  48/ C7 C1		    mov rcx, 16;
	   00000010
 00000007  48/ B8		    mov rax, 1234567812345678h
	   1234567812345678
 00000011  48/ BB		    mov rbx, 2108765432108765h
	   2108765432108765
				    ; expect 2238767832348778

 0000001B			l0:
 0000001B  48/ 3B C3		    cmp rax, rbx
 0000001E  73 07		    jae l1

				    ; rbx is greater - shift its high bits into the low bits of rax
 00000020  48/ 0F A4 D8		    shld rax,rbx, 4
	   04
 00000025  EB 04		    jmp l2

 00000027			l1:

				    ; rax is greater - rotate its high bits into the low bits of rax
 00000027  48/ C1 C0 04		    rol rax, 4
 0000002B			l2:

				    ; both cases, shift the high order bits of rbx out of the way
 0000002B  48/ C1 E3 04		    shl rbx, 4

				    ;; decrement the loop counter and go back to the top if there are more fields
 0000002F  48/ FF C9		    dec rcx
 00000032  75 E7		    jnz l0
 00000034  C3			    ret


 00000035  48/ 0F A4 D8		shld rax, rbx, 4
	   04
				;movd xmm1, rax
				;vprotq xmm0, xmm1, 4

 0000003A  48/ 01 41 05		add [rcx + 5], rax
 0000003E  48/ 03 41 05		add rax, [rcx + 5]
 00000042  66| 48/ 0F 6E C0	movd xmm0, rax
 00000047  F2/ 0F 10 C1		movsd xmm0, xmm1
				; vmovq xmm0, rax       // Illegal instruction
 0000004B  C3			ret

				; Dec
 0000004C  FE C8		dec al
 0000004E  66| FF C8		dec ax
 00000051  FF C8		dec eax
 00000053  48/ FF C8		dec rax
 00000056  49/ FF CC		dec r12

 00000059  41/ FE 8C 24		dec byte ptr [r12 + 1234h]
	   00001234
 00000061  66| 41/ FF 8D	dec word ptr [r13 + 1234h]
	   00001234
 00000069  41/ FF 8E		dec dword ptr [r14 + 1234h]
	   00001234
 00000070  49/ FF 8F		dec qword ptr [r15 + 1234h]
	   00001234

				; Dec
 00000077  41/ FE C1		inc r9b
 0000007A  66| 41/ FF C2	inc r10w
 0000007E  41/ FF C3		inc r11d
 00000081  49/ FF C4		inc r12

 00000084  FE 80 00001234	inc byte ptr [rax + 1234h]
 0000008A  66| FF 85		inc word ptr [rbp + 1234h]
	   00001234
 00000091  FF 86 00001234	inc dword ptr [rsi + 1234h]
 00000097  48/ FF 87		inc qword ptr [rdi + 1234h]
	   00001234

				; SIB
 0000009E  48/ 8B 84 CE		mov rax, [rsi + rcx * 8 + 1234h]
	   00001234
 000000A6  4F/ 8B BC EE		mov r15, [r14 + r13 * 8 + 1234h]
	   00001234
 000000AE  42/ 8A 44 E9		mov al, [rcx + r13 * 8 + 12h]
	   12
 000000B3  66| 41/ 8B 5C C7	mov bx, [r15 + rax * 8 + 34h]
	   34

 000000B9  48/ 23 84 CE		and rax, [rsi + rcx * 8 + 1234h]
	   00001234
 000000C1  4F/ 23 BC EE		and r15, [r14 + r13 * 8 + 1234h]
	   00001234
 000000C9  42/ 22 44 E9		and al, [rcx + r13 * 8 + 12h]
	   12
 000000CE  66| 41/ 23 5C C7	and bx, [r15 + rax * 8 + 34h]
	   34

 000000D4  48/ 23 84 17		and rax, [rdi + rdx * 1 + 5678h]
	   00005678
 000000DC  48/ 23 84 57		and rax, [rdi + rdx * 2 + 5678h]
	   00005678
 000000E4  48/ 23 84 97		and rax, [rdi + rdx * 4 + 5678h]
	   00005678
 000000EC  48/ 23 84 D7		and rax, [rdi + rdx * 8 + 5678h]
	   00005678

				; Another special case
 000000F4  4D/ 03 6D 00		add r13, [r13]
 000000F8  4D/ 8B 6D 00		mov r13, [r13]
 000000FC  48/ 8B 45 00		mov rax, [rbp]
 00000100  48/ 8B 45 12		mov rax, [rbp + 12h]
 00000104  49/ 8B 5D 34		mov rbx, [r13 + 34h]
 00000108  48/ 8B 8D		mov rcx, [rbp + 1234h]
	   00001234

				;
				; Mod/RM special cases for RSP and R12 and [RBP] ==> [RBP + disp8]
				;
 0000010F  49/ 2B 1C 24		sub rbx, [r12]
 00000113  49/ 2B 7C 24		sub rdi, [r12 + 12h]
	   12
 00000118  49/ 2B AC 24		sub rbp, [r12 + 1234h]
	   00001234
 00000120  4D/ 2B 94 24		sub r10, [r12 + 12345678h]
	   12345678

				;
				; Mod/RM case for R8..R15
				;

				;
				; REX W bit. X bit.
				;

				;
				; Group1 addressing mode permutations for a single opcode.
				;

				; direct-direct
 00000128  02 C1		add al, cl
 0000012A  66| 03 DA		add bx, dx
 0000012D  03 F0		add esi, eax
 0000012F  48/ 03 C3		add rax, rbx
 00000132  4D/ 03 C1		add r8, r9
 00000135  49/ 03 E4		add rsp, r12

				; direct-indirect with zero, byte, word, and double word offsets
 00000138  02 08		add cl, byte ptr [rax]
 0000013A  02 59 12		add bl, byte ptr [rcx + 12h]
 0000013D  44/ 02 8E		add r9b, byte ptr [rsi + 100h]
	   00000100
 00000144  44/ 02 BF		add r15b, byte ptr [rdi + 12345678h]
	   12345678

 0000014B  66| 03 12		add dx, word ptr [rdx]
 0000014E  66| 03 49 12		add cx, word ptr [rcx + 12h]
 00000152  66| 44/ 03 8E	add r9w, word ptr [rsi + 1234h]
	   00001234
 0000015A  66| 44/ 03 9F	add r11w, word ptr [rdi + 12345678h]
	   12345678

 00000162  03 12		add edx, dword ptr [rdx]
 00000164  03 49 12		add ecx, dword ptr [rcx + 12h]
 00000167  44/ 03 8E		add r9d, dword ptr [rsi + 1234h]
	   00001234
 0000016E  44/ 03 9F		add r11d, dword ptr [rdi + 12345678h]
	   12345678

 00000175  48/ 03 12		add rdx, qword ptr [rdx]
 00000178  48/ 03 49 12		add rcx, qword ptr [rcx + 12h]
 0000017C  4C/ 03 8E		add r9, qword ptr [rsi + 1234h]
	   00001234
 00000183  4C/ 03 9F		add r11, qword ptr [rdi + 12345678h]
	   12345678


				; indirect-direct with zero, byte, word, and double word offsets
 0000018A  00 08		add byte ptr [rax], cl
 0000018C  00 59 12		add byte ptr [rcx + 12h], bl
 0000018F  44/ 00 8E		add byte ptr [rsi + 100h], r9b
	   00000100
 00000196  44/ 00 BF		add byte ptr [rdi + 12345678h], r15b
	   12345678

 0000019D  66| 01 12		add word ptr [rdx], dx
 000001A0  66| 01 49 12		add word ptr [rcx + 12h], cx
 000001A4  66| 44/ 01 8E	add word ptr [rsi + 1234h], r9w
	   00001234
 000001AC  66| 44/ 01 9F	add word ptr [rdi + 12345678h], r11w
	   12345678

 000001B4  01 12		add dword ptr [rdx], edx
 000001B6  01 49 12		add dword ptr [rcx + 12h], ecx
 000001B9  44/ 01 8E		add dword ptr [rsi + 1234h], r9d
	   00001234
 000001C0  44/ 01 9F		add dword ptr [rdi + 12345678h], r11d
	   12345678

 000001C7  48/ 01 12		add qword ptr [rdx], rdx
 000001CA  48/ 01 49 12		add qword ptr [rcx + 12h], rcx
 000001CE  4C/ 01 8E		add qword ptr [rsi + 1234h], r9
	   00001234
 000001D5  4C/ 01 9F		add qword ptr [rdi + 12345678h], r11
	   12345678

				; direct-immediate register 0 case
 000001DC  04 34		add al, 34h
 000001DE  66| 83 C0 56		add ax, 56h
 000001E2  66| 05 5678		add ax, 5678h
 000001E6  83 C0 12		add eax, 12h
 000001E9  05 00001234		add eax, 1234h
 000001EE  05 12345678		add eax, 12345678h
 000001F3  48/ 83 C0 12		add rax, 12h
 000001F7  48/ 05		add rax, 1234h
	   00001234
 000001FD  48/ 05		add rax, 12345678h
	   12345678

				; direct-immediate general purpose register case
 00000203  80 C3 34		add bl, 34h
 00000206  41/ 80 C5 34		add r13b, 34h
 0000020A  66| 83 C1 56		add cx, 56h
 0000020E  66| 81 C2 5678	add dx, 5678h
 00000213  83 C5 12		add ebp, 12h
 00000216  81 C5 00001234	add ebp, 1234h
 0000021C  81 C5 12345678	add ebp, 12345678h
 00000222  49/ 83 C4 12		add r12, 12h
 00000226  49/ 81 C4		add r12, 1234h
	   00001234
 0000022D  49/ 81 C4		add r12, 12345678h
	   12345678

				; Direct-immediate, different opcodes depending on
				; whether sign extension is acceptable.
				;
				; The immediates that will be sign extended or will use the
				; sign-extend opcode in cases when it makes no difference
				; (when both source and target are 1-byte).
				;
				; The first two lines would correctly fail to compile in NativeJIT
				; and are thus commented out. They would produce the value of
				; FFFFFFFF80000000h unexpectedly since sign extension is unconditionally
				; used for 32-bit immediates targeting 64-bit registers.
				;
				; add rax, 80000000h
				; add rcx, 80000000h
 00000234  48/ 05		add rax, -7fffffffh
	   80000001
 0000023A  48/ 81 C1		add rcx, -7fffffffh
	   80000001
 00000241  80 C1 81		add cl, -7fh
 00000244  80 C1 80		add cl, 80h
 00000247  66| 83 C1 81		add cx, -7fh
 0000024B  83 C1 81		add ecx, -7fh
 0000024E  48/ 83 C1 81		add rcx, -7fh

				; The immediates that will not be sign extended.
 00000252  66| 81 C1 0080	add cx, 80h
 00000257  81 C1 00000080	add ecx, 80h
 0000025D  48/ 81 C1		add rcx, 80h
	   00000080

				;
				; Verify various flavors of each Group1 opcode.
				; These instructions excercise all different flavors
				; which use different base opcode and extension. The
				; generic Group1 encoding was already verified with
				; the add instruction above.
				;
 00000264  24 11		and al, 11h
 00000266  25 11223344		and eax, 11223344h
 0000026B  80 E2 11		and dl, 11h
 0000026E  81 E2 11223344	and edx, 11223344h
 00000274  83 E2 11		and edx, 11h
 00000277  20 53 01		and byte ptr [rbx + 1], dl
 0000027A  21 51 04		and dword ptr [rcx + 4], edx
 0000027D  22 53 01		and dl, byte ptr [rbx + 1]
 00000280  23 51 04		and edx, dword ptr [rcx + 4]

 00000283  3C 11		cmp al, 11h
 00000285  3D 11223344		cmp eax, 11223344h
 0000028A  80 FA 11		cmp dl, 11h
 0000028D  81 FA 11223344	cmp edx, 11223344h
 00000293  83 FA 11		cmp edx, 11h
 00000296  38 53 01		cmp byte ptr [rbx + 1], dl
 00000299  39 51 04		cmp dword ptr [rcx + 4], edx
 0000029C  3A 53 01		cmp dl, byte ptr [rbx + 1]
 0000029F  3B 51 04		cmp edx, dword ptr [rcx + 4]

 000002A2  0C 11		or al, 11h
 000002A4  0D 11223344		or eax, 11223344h
 000002A9  80 CA 11		or dl, 11h
 000002AC  81 CA 11223344	or edx, 11223344h
 000002B2  83 CA 11		or edx, 11h
 000002B5  08 53 01		or byte ptr [rbx + 1], dl
 000002B8  09 51 04		or dword ptr [rcx + 4], edx
 000002BB  0A 53 01		or dl, byte ptr [rbx + 1]
 000002BE  0B 51 04		or edx, dword ptr [rcx + 4]

 000002C1  2C 11		sub al, 11h
 000002C3  2D 11223344		sub eax, 11223344h
 000002C8  80 EA 11		sub dl, 11h
 000002CB  81 EA 11223344	sub edx, 11223344h
 000002D1  83 EA 11		sub edx, 11h
 000002D4  28 53 01		sub byte ptr [rbx + 1], dl
 000002D7  29 51 04		sub dword ptr [rcx + 4], edx
 000002DA  2A 53 01		sub dl, byte ptr [rbx + 1]
 000002DD  2B 51 04		sub edx, dword ptr [rcx + 4]

 000002E0  34 11		xor al, 11h
 000002E2  35 11223344		xor eax, 11223344h
 000002E7  80 F2 11		xor dl, 11h
 000002EA  81 F2 11223344	xor edx, 11223344h
 000002F0  83 F2 11		xor edx, 11h
 000002F3  30 53 01		xor byte ptr [rbx + 1], dl
 000002F6  31 51 04		xor dword ptr [rcx + 4], edx
 000002F9  32 53 01		xor dl, byte ptr [rbx + 1]
 000002FC  33 51 04		xor edx, dword ptr [rcx + 4]

				;
				; Lea
				;
 000002FF  48/ 8D 06		lea rax, [rsi]
 00000302  48/ 8D 46 12		lea rax, [rsi + 12h]
 00000306  48/ 8D 46 EE		lea rax, [rsi - 12h]
 0000030A  48/ 8D 86		lea rax, [rsi + 1234h]
	   00001234
 00000311  48/ 8D 86		lea rax, [rsi - 1234h]
	   FFFFEDCC
 00000318  48/ 8D 86		lea rax, [rsi + 12345678h]
	   12345678
 0000031F  48/ 8D 86		lea rax, [rsi - 12345678h]
	   EDCBA988
 00000326  49/ 8D 2C 24		lea rbp, [r12]
 0000032A  49/ 8D AC 24		lea rbp, [r12 + 87h]
	   00000087
 00000332  49/ 8D AC 24		lea rbp, [r12 - 789ABCDEh]
	   87654322
 0000033A  48/ 8D 6C 24		lea rbp, [rsp + 20h]
	   20
 0000033F  48/ 8D 65 E0		lea rsp, [rbp - 20h]

				;
				; Mov
				;
 00000343  8A C1		mov al, cl
 00000345  66| 8B DA		mov bx, dx
 00000348  8B F0		mov esi, eax
 0000034A  48/ 8B C3		mov rax, rbx
 0000034D  4D/ 8B C1		mov r8, r9
 00000350  49/ 8B E4		mov rsp, r12

 00000353  8A 08		mov cl, [rax]
 00000355  8A 59 12		mov bl, [rcx + 12h]
 00000358  44/ 8A 8E		mov r9b, [rsi + 100h]
	   00000100
 0000035F  44/ 8A BF		mov r15b, [rdi + 12345678h]
	   12345678

 00000366  8A 12		mov dl, [rdx]
 00000368  66| 8B 49 12		mov cx, [rcx + 12h]
 0000036C  66| 44/ 8B 8E	mov r9w, [rsi + 1234h]
	   00001234
 00000374  66| 44/ 8B 9F	mov r11w, [rdi + 12345678h]
	   12345678

 0000037C  41/ 8B 21		mov esp, [r9]
 0000037F  8B 51 12		mov edx, [rcx + 12h]
 00000382  8B B6 00001234	mov esi, [rsi + 1234h]
 00000388  44/ 8B 9F		mov r11d, [rdi + 12345678h]
	   12345678

 0000038F  49/ 8B 1C 24		mov rbx, [r12]
 00000393  48/ 8B 79 12		mov rdi, [rcx + 12h]
 00000397  48/ 8B AE		mov rbp, [rsi + 1234h]
	   00001234
 0000039E  4C/ 8B 97		mov r10, [rdi + 12345678h]
	   12345678

				; mov r, imm - register 0 case
 000003A5  B0 00		mov al, 0
 000003A7  B0 34		mov al, 34h
 000003A9  66| B8 0056		mov ax, 56h
 000003AD  66| B8 5678		mov ax, 5678h
 000003B1  B8 00000012		mov eax, 12h
 000003B6  B8 00001234		mov eax, 1234h
 000003BB  B8 12345678		mov eax, 12345678h
 000003C0  48/ C7 C0		mov rax, 12h
	   00000012
 000003C7  48/ C7 C0		mov rax, 1234h
	   00001234
 000003CE  48/ C7 C0		mov rax, 12345678h
	   12345678
 000003D5  48/ B8		mov rax, 80000000h
	   0000000080000000
 000003DF  48/ C7 C0		mov rax, -1
	   FFFFFFFF

				; mov r, imm - general purpose register case
 000003E6  B3 00		mov bl, 0
 000003E8  B3 34		mov bl, 34h
 000003EA  41/ B5 34		mov r13b, 34h
 000003ED  66| B9 0056		mov cx, 56h
 000003F1  66| BA 5678		mov dx, 5678h
 000003F5  BD 00000012		mov ebp, 12h
 000003FA  BD 00001234		mov ebp, 1234h
 000003FF  BD 12345678		mov ebp, 12345678h
 00000404  49/ C7 C4		mov r12, 12h
	   00000012
 0000040B  49/ C7 C4		mov r12, 1234h
	   00001234
 00000412  49/ C7 C4		mov r12, 12345678h
	   12345678
 00000419  49/ BC		mov r12, 80000000h
	   0000000080000000
 00000423  48/ BB		mov rbx, 1234567812345678h
	   1234567812345678
 0000042D  48/ BC		mov rsp, 1234567812345678h
	   1234567812345678
 00000437  49/ BC		mov r12, 1234567812345678h
	   1234567812345678
				; Test for immediate T*
 00000441  48/ B8		mov rax, 2234567812345678h
	   2234567812345678


				; mov [r + offset], r with zero, byte, word, and dword offsets
 0000044B  88 08		mov [rax], cl
 0000044D  88 59 12		mov [rcx + 12h], bl
 00000450  44/ 88 8E		mov [rsi + 100h], r9b
	   00000100
 00000457  44/ 88 BF		mov [rdi + 12345678h], r15b
	   12345678

 0000045E  88 12		mov [rdx], dl
 00000460  66| 89 49 12		mov [rcx + 12h], cx
 00000464  66| 44/ 89 8E	mov [rsi + 1234h], r9w
	   00001234
 0000046C  66| 44/ 89 9F	mov [rdi + 12345678h], r11w
	   12345678

 00000474  41/ 89 21		mov [r9], esp
 00000477  89 51 12		mov [rcx + 12h], edx
 0000047A  89 B6 00001234	mov [rsi + 1234h], esi
 00000480  44/ 89 9F		mov [rdi + 12345678h], r11d
	   12345678

 00000487  49/ 89 1C 24		mov [r12], rbx
 0000048B  48/ 89 79 12		mov [rcx + 12h], rdi
 0000048F  48/ 89 AE		mov [rsi + 1234h], rbp
	   00001234
 00000496  4C/ 89 97		mov [rdi + 12345678h], r10
	   12345678


				;
				; Push/Pop
				;
 0000049D  58			pop rax
 0000049E  5D			pop rbp
 0000049F  41/ 5C		pop r12
 000004A1  53			push rbx
 000004A2  55			push rbp
 000004A3  41/ 54		push r12

				;
				; Ret
				;
 000004A5  C3			ret

 000004A6			LL1:
 000004A6  74 FE		    jz LL1
 000004A8  0F 84 FFFFFFF8	    jz near ptr LL1
 000004AE  74 F6		    jz LL1
 000004B0  0F 84 FFFFFFF0	    jz near ptr LL1
				;    jz far ptr LL1


				;
				; Imul
				;

 000004B6  66| 0F AF D9		imul bx, cx
 000004BA  0F AF D9		imul ebx, ecx
 000004BD  48/ 0F AF D9		imul rbx, rcx

 000004C1  48/ 0F AF C3		imul rax, rbx;
 000004C5  4D/ 0F AF C1		imul r8, r9;
 000004C9  66| 0F AF C3		imul ax, bx;

 000004CD  66| 0F AF 49		imul cx, [rcx + 12h]
	   12
 000004D2  66| 44/ 0F AF 8E	imul r9w, [rsi + 1234h]
	   00001234
 000004DB  66| 44/ 0F AF 9F	imul r11w, [rdi + 12345678h]
	   12345678

 000004E4  41/ 0F AF 21		imul esp, [r9]
 000004E8  0F AF 51 12		imul edx, [rcx + 12h]
 000004EC  0F AF B6		imul esi, [rsi + 1234h]
	   00001234
 000004F3  44/ 0F AF 9F		imul r11d, [rdi + 12345678h]
	   12345678

 000004FB  49/ 0F AF 1C 24	imul rbx, [r12]
 00000500  48/ 0F AF 79		imul rdi, [rcx + 12h]
	   12
 00000505  48/ 0F AF AE		imul rbp, [rsi + 1234h]
	   00001234
 0000050D  4C/ 0F AF 97		imul r10, [rdi + 12345678h]
	   12345678

 00000515  66| 6B C9 56		imul cx, 56h
 00000519  66| 69 C9 0080	imul cx, 80h
 0000051E  66| 69 D2 5678	imul dx, 5678h
 00000523  6B ED 12		imul ebp, 12h
 00000526  69 ED 00001234	imul ebp, 1234h
 0000052C  69 ED 12345678	imul ebp, 12345678h
 00000532  4D/ 6B E4 12		imul r12, 12h
 00000536  4D/ 69 E4		imul r12, 1234h
	   00001234
 0000053D  4D/ 69 E4		imul r12, 12345678h
	   12345678
 00000544  4D/ 6B E4 FF		imul r12, -1

 00000548  FF D0		call rax
 0000054A  FF D4		call rsp
 0000054C  FF D5		call rbp
 0000054E  41/ FF D4		call r12
 00000551  41/ FF D5		call r13

 00000554  48/ B8		mov rax, 07fffffffffffffffh
	   7FFFFFFFFFFFFFFF

 0000055E  66| 48/ 0F 6E C8	movd xmm1, rax
 00000563  66| 48/ 0F 6E C9	movd xmm1, rcx
 00000568  66| 49/ 0F 6E C8	movd xmm1, r8
 0000056D  66| 48/ 0F 6E CD	movd xmm1, rbp
 00000572  66| 49/ 0F 6E CC	movd xmm1, r12

 00000577  66| 48/ 0F 6E C1	movd xmm0, rcx
 0000057C  66| 48/ 0F 6E C9	movd xmm1, rcx
 00000581  66| 48/ 0F 6E D1	movd xmm2, rcx
 00000586  66| 48/ 0F 6E E9	movd xmm5, rcx
 0000058B  66| 4C/ 0F 6E E1	movd xmm12, rcx

 00000590  66| 0F 6E C8		movd xmm1, eax
 00000594  66| 0F 6E C9		movd xmm1, ecx
 00000598  66| 41/ 0F 6E C8	movd xmm1, r8d
 0000059D  66| 0F 6E CD		movd xmm1, ebp
 000005A1  66| 41/ 0F 6E CC	movd xmm1, r12d

 000005A6  66| 0F 6E C1		movd xmm0, ecx
 000005AA  66| 0F 6E C9		movd xmm1, ecx
 000005AE  66| 0F 6E D1		movd xmm2, ecx
 000005B2  66| 0F 6E E9		movd xmm5, ecx
 000005B6  66| 44/ 0F 6E E1	movd xmm12, ecx

				; movss
 000005BB  F3/ 0F 10 CA		movss xmm1, xmm2
 000005BF  F3/ 41/ 0F 10 C4	movss xmm0, xmm12
 000005C4  F3/ 41/ 0F 10 EC	movss xmm5, xmm12
 000005C9  F3/ 0F 10 EB		movss xmm5, xmm3
 000005CD  F3/ 44/ 0F 10 ED	movss xmm13, xmm5
 000005D2  F3/ 41/ 0F 10 C7	movss xmm0, xmm15

 000005D7  F3/ 41/ 0F 10 04	movss xmm0, dword ptr [r12]
	   24
 000005DD  F3/ 0F 10 61		movss xmm4, dword ptr [rcx + 12h]
	   12
 000005E2  F3/ 0F 10 AE		movss xmm5, dword ptr [rsi + 1234h]
	   00001234
 000005EA  F3/ 44/ 0F 10 A7	movss xmm12, dword ptr [rdi + 12345678h]
	   12345678

 000005F3  F3/ 41/ 0F 11 04	movss dword ptr [r12], xmm0
	   24
 000005F9  F3/ 0F 11 61		movss dword ptr [rcx + 12h], xmm4
	   12
 000005FE  F3/ 0F 11 AE		movss dword ptr [rsi + 1234h], xmm5
	   00001234
 00000606  F3/ 44/ 0F 11 A7	movss dword ptr [rdi + 12345678h], xmm12
	   12345678

				; movsd
 0000060F  F2/ 0F 10 CA		movsd xmm1, xmm2
 00000613  F2/ 41/ 0F 10 C4	movsd xmm0, xmm12
 00000618  F2/ 41/ 0F 10 EC	movsd xmm5, xmm12
 0000061D  F2/ 0F 10 EB		movsd xmm5, xmm3
 00000621  F2/ 44/ 0F 10 ED	movsd xmm13, xmm5
 00000626  F2/ 41/ 0F 10 C7	movsd xmm0, xmm15

 0000062B  F2/ 41/ 0F 10 04	movsd xmm0, qword ptr [r12]
	   24
 00000631  F2/ 0F 10 61		movsd xmm4, qword ptr [rcx + 12h]
	   12
 00000636  F2/ 0F 10 AE		movsd xmm5, qword ptr [rsi + 1234h]
	   00001234
 0000063E  F2/ 44/ 0F 10 A7	movsd xmm12, qword ptr [rdi + 12345678h]
	   12345678

 00000647  F2/ 41/ 0F 11 04	movsd qword ptr [r12], xmm0
	   24
 0000064D  F2/ 0F 11 61		movsd qword ptr [rcx + 12h], xmm4
	   12
 00000652  F2/ 0F 11 AE		movsd qword ptr [rsi + 1234h], xmm5
	   00001234
 0000065A  F2/ 44/ 0F 11 A7	movsd qword ptr [rdi + 12345678h], xmm12
	   12345678

 00000663  F2/ 0F 58 CA		addsd xmm1, xmm2
 00000667  F2/ 41/ 0F 58 C4	addsd xmm0, xmm12
 0000066C  F2/ 41/ 0F 59 EC	mulsd xmm5, xmm12
 00000671  F2/ 0F 59 EB		mulsd xmm5, xmm3
 00000675  F2/ 44/ 0F 5C ED	subsd xmm13, xmm5
 0000067A  F2/ 41/ 0F 5C C7	subsd xmm0, xmm15

 0000067F  F2/ 41/ 0F 58 04	addsd xmm0, qword ptr [r12]
	   24
 00000685  F2/ 0F 58 61		addsd xmm4, qword ptr [rcx + 12h]
	   12
 0000068A  F2/ 0F 59 AE		mulsd xmm5, qword ptr [rsi + 1234h]
	   00001234
 00000692  F2/ 44/ 0F 5C A7	subsd xmm12, qword ptr [rdi + 12345678h]
	   12345678

 0000069B  F3/ 0F 58 CA		addss xmm1, xmm2
 0000069F  F3/ 41/ 0F 58 C4	addss xmm0, xmm12
 000006A4  F3/ 41/ 0F 59 EC	mulss xmm5, xmm12
 000006A9  F3/ 0F 59 EB		mulss xmm5, xmm3
 000006AD  F3/ 44/ 0F 5C ED	subss xmm13, xmm5
 000006B2  F3/ 41/ 0F 5C C7	subss xmm0, xmm15

 000006B7  F3/ 41/ 0F 58 04	addss xmm0, dword ptr [r12]
	   24
 000006BD  F3/ 0F 58 61		addss xmm4, dword ptr [rcx + 12h]
	   12
 000006C2  F3/ 0F 59 AE		mulss xmm5, dword ptr [rsi + 1234h]
	   00001234
 000006CA  F3/ 44/ 0F 5C A7	subss xmm12, dword ptr [rdi + 12345678h]
	   12345678

				;
				; MovZX
				;

				; 1 byte to 2, 4 and 8.
 000006D3  66| 0F B6 DB		movzx bx, bl
 000006D7  66| 41/ 0F B6 DC	movzx bx, r12b
 000006DC  66| 44/ 0F B6 CA	movzx r9w, dl
 000006E1  66| 0F B6 59		movzx bx, byte ptr [rcx + 12h]
	   12
 000006E6  66| 41/ 0F B6 59	movzx bx, byte ptr [r9 + 34h]
	   34

 000006EC  0F B6 DB		movzx ebx, bl
 000006EF  41/ 0F B6 DC		movzx ebx, r12b
 000006F3  44/ 0F B6 CA		movzx r9d, dl
 000006F7  0F B6 59 12		movzx ebx, byte ptr [rcx + 12h]
 000006FB  41/ 0F B6 59		movzx ebx, byte ptr [r9 + 34h]
	   34

 00000700  48/ 0F B6 DB		movzx rbx, bl
 00000704  49/ 0F B6 DC		movzx rbx, r12b
 00000708  4C/ 0F B6 CA		movzx r9, dl
 0000070C  48/ 0F B6 59		movzx rbx, byte ptr [rcx + 12h]
	   12
 00000711  49/ 0F B6 59		movzx rbx, byte ptr [r9 + 34h]
	   34

				; 2 bytes to 4 and 8
 00000716  0F B7 DB		movzx ebx, bx
 00000719  41/ 0F B7 DC		movzx ebx, r12w
 0000071D  44/ 0F B7 CA		movzx r9d, dx
 00000721  0F B7 59 12		movzx ebx, word ptr [rcx + 12h]
 00000725  41/ 0F B7 59		movzx ebx, word ptr [r9 + 34h]
	   34

 0000072A  48/ 0F B7 DB		movzx rbx, bx
 0000072E  49/ 0F B7 DC		movzx rbx, r12w
 00000732  4C/ 0F B7 CA		movzx r9, dx
 00000736  48/ 0F B7 59		movzx rbx, word ptr [rcx + 12h]
	   12
 0000073B  49/ 0F B7 59		movzx rbx, word ptr [r9 + 34h]
	   34

				; 4 bytes to 8, implemented in terms of mov
 00000740  8B DB		mov ebx, ebx
 00000742  41/ 8B DC		mov ebx, r12d
 00000745  44/ 8B CA		mov r9d, edx
 00000748  8B 59 12		mov ebx, dword ptr [rcx + 12h]
 0000074B  41/ 8B 59 34		mov ebx, dword ptr [r9 + 34h]

				;
				; MovSX
				;

				; 1 byte to 2, 4 and 8.
 0000074F  66| 0F BE DB		movsx bx, bl
 00000753  66| 41/ 0F BE DC	movsx bx, r12b
 00000758  66| 44/ 0F BE CA	movsx r9w, dl
 0000075D  66| 0F BE 59		movsx bx, byte ptr [rcx + 12h]
	   12
 00000762  66| 41/ 0F BE 59	movsx bx, byte ptr [r9 + 34h]
	   34

 00000768  0F BE DB		movsx ebx, bl
 0000076B  41/ 0F BE DC		movsx ebx, r12b
 0000076F  44/ 0F BE CA		movsx r9d, dl
 00000773  0F BE 59 12		movsx ebx, byte ptr [rcx + 12h]
 00000777  41/ 0F BE 59		movsx ebx, byte ptr [r9 + 34h]
	   34

 0000077C  48/ 0F BE DB		movsx rbx, bl
 00000780  49/ 0F BE DC		movsx rbx, r12b
 00000784  4C/ 0F BE CA		movsx r9, dl
 00000788  48/ 0F BE 59		movsx rbx, byte ptr [rcx + 12h]
	   12
 0000078D  49/ 0F BE 59		movsx rbx, byte ptr [r9 + 34h]
	   34

				; 2 bytes to 4 and 8
 00000792  0F BF DB		movsx ebx, bx
 00000795  41/ 0F BF DC		movsx ebx, r12w
 00000799  44/ 0F BF CA		movsx r9d, dx
 0000079D  0F BF 59 12		movsx ebx, word ptr [rcx + 12h]
 000007A1  41/ 0F BF 59		movsx ebx, word ptr [r9 + 34h]
	   34

 000007A6  48/ 0F BF DB		movsx rbx, bx
 000007AA  49/ 0F BF DC		movsx rbx, r12w
 000007AE  4C/ 0F BF CA		movsx r9, dx
 000007B2  48/ 0F BF 59		movsx rbx, word ptr [rcx + 12h]
	   12
 000007B7  49/ 0F BF 59		movsx rbx, word ptr [r9 + 34h]
	   34

				; 4 bytes to 8
 000007BC  48/ 63 DB		movsxd rbx, ebx
 000007BF  49/ 63 DC		movsxd rbx, r12d
 000007C2  4C/ 63 CA		movsxd r9, edx
 000007C5  48/ 63 59 12		movsxd rbx, dword ptr [rcx + 12h]
 000007C9  49/ 63 59 34		movsxd rbx, dword ptr [r9 + 34h]

				;
				; Aligned 128-bit floating point move: movaps and movapd
				;

 000007CD  0F 28 C9		movaps xmm1, xmm1
 000007D0  41/ 0F 28 D1		movaps xmm2, xmm9
 000007D4  0F 28 51 20		movaps xmm2, dword ptr [rcx + 20h]
 000007D8  41/ 0F 28 91		movaps xmm2, dword ptr [r9 + 200h]
	   00000200
 000007E0  0F 29 51 20		movaps dword ptr [rcx + 20h], xmm2
 000007E4  41/ 0F 29 51		movaps dword ptr [r9 + 20h], xmm2
	   20
 000007E9  45/ 0F 29 99		movaps dword ptr [r9 + 200h], xmm11
	   00000200

 000007F1  66| 0F 28 C9		movapd xmm1, xmm1
 000007F5  66| 41/ 0F 28 D1	movapd xmm2, xmm9
 000007FA  66| 0F 28 51		movapd xmm2, qword ptr [rcx + 20h]
	   20
 000007FF  66| 41/ 0F 28 91	movapd xmm2, qword ptr [r9 + 200h]
	   00000200
 00000808  66| 0F 29 51		movapd qword ptr [rcx + 20h], xmm2
	   20
 0000080D  66| 41/ 0F 29 51	movapd qword ptr [r9 + 20h], xmm2
	   20
 00000813  66| 45/ 0F 29 99	movapd qword ptr [r9 + 200h], xmm11
	   00000200

				;
				; CvtSI2SD/CvtSI2SS
				;

 0000081C  F3/ 0F 2A C8		cvtsi2ss xmm1, eax
 00000820  F3/ 48/ 0F 2A C8	cvtsi2ss xmm1, rax
 00000825  F3/ 4C/ 0F 2A CB	cvtsi2ss xmm9, rbx
 0000082A  F3/ 49/ 0F 2A C8	cvtsi2ss xmm1, r8
 0000082F  F3/ 0F 2A 49		cvtsi2ss xmm1, dword ptr [rcx + 12h]
	   12
 00000834  F3/ 41/ 0F 2A 49	cvtsi2ss xmm1, dword ptr [r9 + 34h]
	   34
 0000083A  F3/ 48/ 0F 2A 49	cvtsi2ss xmm1, qword ptr [rcx + 56h]
	   56

 00000840  F2/ 0F 2A C8		cvtsi2sd xmm1, eax
 00000844  F2/ 48/ 0F 2A C8	cvtsi2sd xmm1, rax
 00000849  F2/ 4C/ 0F 2A CB	cvtsi2sd xmm9, rbx
 0000084E  F2/ 49/ 0F 2A C8	cvtsi2sd xmm1, r8
 00000853  F2/ 0F 2A 49		cvtsi2sd xmm1, dword ptr [rcx + 12h]
	   12
 00000858  F2/ 41/ 0F 2A 49	cvtsi2sd xmm1, dword ptr [r9 + 34h]
	   34
 0000085E  F2/ 48/ 0F 2A 49	cvtsi2sd xmm1, qword ptr [rcx + 56h]
	   56

				;
				; CvtTSD2SI/CvtTSS2SI
				;

 00000864  F3/ 0F 2C C1		cvttss2si eax, xmm1
 00000868  F3/ 48/ 0F 2C C1	cvttss2si rax, xmm1
 0000086D  F3/ 49/ 0F 2C D9	cvttss2si rbx, xmm9
 00000872  F3/ 4C/ 0F 2C C1	cvttss2si r8, xmm1
 00000877  F3/ 0F 2C 59		cvttss2si ebx, dword ptr [rcx + 12h]
	   12
 0000087C  F3/ 41/ 0F 2C 59	cvttss2si ebx, dword ptr [r9 + 34h]
	   34
 00000882  F3/ 48/ 0F 2C 59	cvttss2si rbx, dword ptr [rcx + 56h]
	   56

 00000888  F2/ 0F 2C C1		cvttsd2si eax, xmm1
 0000088C  F2/ 48/ 0F 2C C1	cvttsd2si rax, xmm1
 00000891  F2/ 49/ 0F 2C D9	cvttsd2si rbx, xmm9
 00000896  F2/ 4C/ 0F 2C C1	cvttsd2si r8, xmm1
 0000089B  F2/ 0F 2C 59		cvttsd2si ebx, qword ptr [rcx + 12h]
	   12
 000008A0  F2/ 41/ 0F 2C 59	cvttsd2si ebx, qword ptr [r9 + 34h]
	   34
 000008A6  F2/ 48/ 0F 2C 59	cvttsd2si rbx, qword ptr [rcx + 56h]
	   56

				;
				; Conversion, float - cvtss2sd and cvtsd2ss
				;

 000008AC  F3/ 0F 5A C9		cvtss2sd xmm1, xmm1
 000008B0  F3/ 41/ 0F 5A D1	cvtss2sd xmm2, xmm9
 000008B5  F3/ 0F 5A 51		cvtss2sd xmm2, dword ptr [rcx + 20h]
	   20
 000008BA  F3/ 41/ 0F 5A 91	cvtss2sd xmm2, dword ptr [r9 + 200h]
	   00000200

 000008C3  F2/ 0F 5A C9		cvtsd2ss xmm1, xmm1
 000008C7  F2/ 41/ 0F 5A D1	cvtsd2ss xmm2, xmm9
 000008CC  F2/ 0F 5A 51		cvtsd2ss xmm2, qword ptr [rcx + 20h]
	   20
 000008D1  F2/ 41/ 0F 5A 91	cvtsd2ss xmm2, qword ptr [r9 + 200h]
	   00000200

				;
				; Floating point comparison, comiss and comisd.
				;

 000008DA  0F 2F C9		comiss xmm1, xmm1
 000008DD  41/ 0F 2F D1		comiss xmm2, xmm9
 000008E1  0F 2F 51 20		comiss xmm2, dword ptr [rcx + 20h]
 000008E5  41/ 0F 2F 91		comiss xmm2, dword ptr [r9 + 200h]
	   00000200

 000008ED  66| 0F 2F C9		comisd xmm1, xmm1
 000008F1  66| 41/ 0F 2F D1	comisd xmm2, xmm9
 000008F6  66| 0F 2F 51		comisd xmm2, qword ptr [rcx + 20h]
	   20
 000008FB  66| 41/ 0F 2F 91	comisd xmm2, qword ptr [r9 + 200h]
	   00000200

				;
				; Shift/rotate
				;

 00000904  D2 C0		rol al, cl
 00000906  D3 E3		shl ebx, cl
 00000908  49/ D3 EC		shr r12, cl

 0000090B  48/ C1 C0 03		rol rax, 3
 0000090F  C0 E3 04		shl bl, 4
 00000912  41/ C1 EC 05		shr r12d, 5

 00000916  66| 0F A4 D8		shld ax, bx, 11
	   0B
 0000091B  0F A4 F2 18		shld edx, esi, 24
 0000091F  49/ 0F A4 EC		shld r12, rbp, 43
	   2B
 00000924  4C/ 0F A4 E5		shld rbp, r12, 43
	   2B

 00000929  66| 0F A5 D8		shld ax, bx, cl
 0000092D  0F A5 F2		shld edx, esi, cl
 00000930  49/ 0F A5 EC		shld r12, rbp, cl
 00000934  4C/ 0F A5 E5		shld rbp, r12, cl

 00000938			main ENDP

				END
