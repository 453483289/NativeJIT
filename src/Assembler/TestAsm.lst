Microsoft (R) Macro Assembler (x64) Version 14.00.24210.0   11/10/16 20:08:57
TestAsm.asm						     Page 1 - 1


				; The MIT License (MIT)

				; Copyright (c) 2016, Microsoft

				; Permission is hereby granted, free of charge, to any person obtaining a copy
				; of this software and associated documentation files (the "Software"), to deal
				; in the Software without restriction, including without limitation the rights
				; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
				; copies of the Software, and to permit persons to whom the Software is
				; furnished to do so, subject to the following conditions:

				; The above copyright notice and this permission notice shall be included in
				; all copies or substantial portions of the Software.

				; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
				; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
				; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
				; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
				; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
				; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
				; THE SOFTWARE.

				; Description:
				; 
				; Revision date:

 00000000			.data
 00000000 4D 41 53 4D 20	myMessage BYTE "MASM program example",0dh,0ah,0
	   70 72 6F 67 72
	   61 6D 20 65 78
	   61 6D 70 6C 65
	   0D 0A 00

 00000000			.code
 00000000			main PROC

 00000000  48/ C7 C1		    mov rcx, 16;
	   00000010
 00000007  48/ B8		    mov rax, 1234567812345678h
	   1234567812345678
 00000011  48/ BB		    mov rbx, 2108765432108765h
	   2108765432108765
				    ; expect 2238767832348778

 0000001B			l0:
 0000001B  48/ 3B C3		    cmp rax, rbx
 0000001E  73 07		    jae l1

				    ; rbx is greater - shift its high bits into the low bits of rax
 00000020  48/ 0F A4 D8		    shld rax,rbx, 4
	   04
 00000025  EB 04		    jmp l2

 00000027			l1:

				    ; rax is greater - rotate its high bits into the low bits of rax
 00000027  48/ C1 C0 04		    rol rax, 4
 0000002B			l2:

				    ; both cases, shift the high order bits of rbx out of the way
 0000002B  48/ C1 E3 04		    shl rbx, 4

				    ;; decrement the loop counter and go back to the top if there are more fields
 0000002F  48/ FF C9		    dec rcx
 00000032  75 E7		    jnz l0
 00000034  C3			    ret


 00000035  48/ 0F A4 D8		shld rax, rbx, 4
	   04
				;movd xmm1, rax
				;vprotq xmm0, xmm1, 4

 0000003A  48/ 01 41 05		add [rcx + 5], rax
 0000003E  48/ 03 41 05		add rax, [rcx + 5]
 00000042  66| 48/ 0F 6E C0	movd xmm0, rax
 00000047  F2/ 0F 10 C1		movsd xmm0, xmm1
				; vmovq xmm0, rax       // Illegal instruction
 0000004B  C3			ret

				; SIB
 0000004C  48/ 8B 84 CE		mov rax, [rsi + rcx * 8 + 1234h]
	   00001234
 00000054  4F/ 8B BC EE		mov r15, [r14 + r13 * 8 + 1234h]
	   00001234
 0000005C  42/ 8A 44 E9		mov al, [rcx + r13 * 8 + 12h]
	   12
 00000061  66| 41/ 8B 5C C7	mov bx, [r15 + rax * 8 + 34h]
	   34

 00000067  48/ 23 84 CE		and rax, [rsi + rcx * 8 + 1234h]
	   00001234
 0000006F  4F/ 23 BC EE		and r15, [r14 + r13 * 8 + 1234h]
	   00001234
 00000077  42/ 22 44 E9		and al, [rcx + r13 * 8 + 12h]
	   12
 0000007C  66| 41/ 23 5C C7	and bx, [r15 + rax * 8 + 34h]
	   34

 00000082  48/ 23 84 17		and rax, [rdi + rdx * 1 + 5678h]
	   00005678
 0000008A  48/ 23 84 57		and rax, [rdi + rdx * 2 + 5678h]
	   00005678
 00000092  48/ 23 84 97		and rax, [rdi + rdx * 4 + 5678h]
	   00005678
 0000009A  48/ 23 84 D7		and rax, [rdi + rdx * 8 + 5678h]
	   00005678

				; Another special case
 000000A2  4D/ 03 6D 00		add r13, [r13]
 000000A6  4D/ 8B 6D 00		mov r13, [r13]
 000000AA  48/ 8B 45 00		mov rax, [rbp]
 000000AE  48/ 8B 45 12		mov rax, [rbp + 12h]
 000000B2  49/ 8B 5D 34		mov rbx, [r13 + 34h]
 000000B6  48/ 8B 8D		mov rcx, [rbp + 1234h]
	   00001234

				;
				; Mod/RM special cases for RSP and R12 and [RBP] ==> [RBP + disp8]
				;
 000000BD  49/ 2B 1C 24		sub rbx, [r12]
 000000C1  49/ 2B 7C 24		sub rdi, [r12 + 12h]
	   12
 000000C6  49/ 2B AC 24		sub rbp, [r12 + 1234h]
	   00001234
 000000CE  4D/ 2B 94 24		sub r10, [r12 + 12345678h]
	   12345678

				;
				; Mod/RM case for R8..R15
				;

				;
				; REX W bit. X bit.
				;

				;
				; Group1 addressing mode permutations for a single opcode.
				;

				; direct-direct
 000000D6  02 C1		add al, cl
 000000D8  66| 03 DA		add bx, dx
 000000DB  03 F0		add esi, eax
 000000DD  48/ 03 C3		add rax, rbx
 000000E0  4D/ 03 C1		add r8, r9
 000000E3  49/ 03 E4		add rsp, r12

				; direct-indirect with zero, byte, word, and double word offsets
 000000E6  02 08		add cl, byte ptr [rax]
 000000E8  02 59 12		add bl, byte ptr [rcx + 12h]
 000000EB  44/ 02 8E		add r9b, byte ptr [rsi + 100h]
	   00000100
 000000F2  44/ 02 BF		add r15b, byte ptr [rdi + 12345678h]
	   12345678

 000000F9  66| 03 12		add dx, word ptr [rdx]
 000000FC  66| 03 49 12		add cx, word ptr [rcx + 12h]
 00000100  66| 44/ 03 8E	add r9w, word ptr [rsi + 1234h]
	   00001234
 00000108  66| 44/ 03 9F	add r11w, word ptr [rdi + 12345678h]
	   12345678

 00000110  03 12		add edx, dword ptr [rdx]
 00000112  03 49 12		add ecx, dword ptr [rcx + 12h]
 00000115  44/ 03 8E		add r9d, dword ptr [rsi + 1234h]
	   00001234
 0000011C  44/ 03 9F		add r11d, dword ptr [rdi + 12345678h]
	   12345678

 00000123  48/ 03 12		add rdx, qword ptr [rdx]
 00000126  48/ 03 49 12		add rcx, qword ptr [rcx + 12h]
 0000012A  4C/ 03 8E		add r9, qword ptr [rsi + 1234h]
	   00001234
 00000131  4C/ 03 9F		add r11, qword ptr [rdi + 12345678h]
	   12345678


				; indirect-direct with zero, byte, word, and double word offsets
 00000138  00 08		add byte ptr [rax], cl
 0000013A  00 59 12		add byte ptr [rcx + 12h], bl
 0000013D  44/ 00 8E		add byte ptr [rsi + 100h], r9b
	   00000100
 00000144  44/ 00 BF		add byte ptr [rdi + 12345678h], r15b
	   12345678

 0000014B  66| 01 12		add word ptr [rdx], dx
 0000014E  66| 01 49 12		add word ptr [rcx + 12h], cx
 00000152  66| 44/ 01 8E	add word ptr [rsi + 1234h], r9w
	   00001234
 0000015A  66| 44/ 01 9F	add word ptr [rdi + 12345678h], r11w
	   12345678

 00000162  01 12		add dword ptr [rdx], edx
 00000164  01 49 12		add dword ptr [rcx + 12h], ecx
 00000167  44/ 01 8E		add dword ptr [rsi + 1234h], r9d
	   00001234
 0000016E  44/ 01 9F		add dword ptr [rdi + 12345678h], r11d
	   12345678

 00000175  48/ 01 12		add qword ptr [rdx], rdx
 00000178  48/ 01 49 12		add qword ptr [rcx + 12h], rcx
 0000017C  4C/ 01 8E		add qword ptr [rsi + 1234h], r9
	   00001234
 00000183  4C/ 01 9F		add qword ptr [rdi + 12345678h], r11
	   12345678

				; direct-immediate register 0 case
 0000018A  04 34		add al, 34h
 0000018C  66| 83 C0 56		add ax, 56h
 00000190  66| 05 5678		add ax, 5678h
 00000194  83 C0 12		add eax, 12h
 00000197  05 00001234		add eax, 1234h
 0000019C  05 12345678		add eax, 12345678h
 000001A1  48/ 83 C0 12		add rax, 12h
 000001A5  48/ 05		add rax, 1234h
	   00001234
 000001AB  48/ 05		add rax, 12345678h
	   12345678

				; direct-immediate general purpose register case
 000001B1  80 C3 34		add bl, 34h
 000001B4  41/ 80 C5 34		add r13b, 34h
 000001B8  66| 83 C1 56		add cx, 56h
 000001BC  66| 81 C2 5678	add dx, 5678h
 000001C1  83 C5 12		add ebp, 12h
 000001C4  81 C5 00001234	add ebp, 1234h
 000001CA  81 C5 12345678	add ebp, 12345678h
 000001D0  49/ 83 C4 12		add r12, 12h
 000001D4  49/ 81 C4		add r12, 1234h
	   00001234
 000001DB  49/ 81 C4		add r12, 12345678h
	   12345678

				; Direct-immediate, different opcodes depending on
				; whether sign extension is acceptable.
				;
				; The immediates that will be sign extended or will use the
				; sign-extend opcode in cases when it makes no difference
				; (when both source and target are 1-byte).
				;
				; The first two lines would correctly fail to compile in NativeJIT
				; and are thus commented out. They would produce the value of
				; FFFFFFFF80000000h unexpectedly since sign extension is unconditionally
				; used for 32-bit immediates targeting 64-bit registers.
				;
				; add rax, 80000000h
				; add rcx, 80000000h
 000001E2  48/ 05		add rax, -7fffffffh
	   80000001
 000001E8  48/ 81 C1		add rcx, -7fffffffh
	   80000001
 000001EF  80 C1 81		add cl, -7fh
 000001F2  80 C1 80		add cl, 80h
 000001F5  66| 83 C1 81		add cx, -7fh
 000001F9  83 C1 81		add ecx, -7fh
 000001FC  48/ 83 C1 81		add rcx, -7fh

				; The immediates that will not be sign extended.
 00000200  66| 81 C1 0080	add cx, 80h
 00000205  81 C1 00000080	add ecx, 80h
 0000020B  48/ 81 C1		add rcx, 80h
	   00000080

				;
				; Verify various flavors of each Group1 opcode.
				; These instructions excercise all different flavors
				; which use different base opcode and extension. The
				; generic Group1 encoding was already verified with
				; the add instruction above.
				;
 00000212  24 11		and al, 11h
 00000214  25 11223344		and eax, 11223344h
 00000219  80 E2 11		and dl, 11h
 0000021C  81 E2 11223344	and edx, 11223344h
 00000222  83 E2 11		and edx, 11h
 00000225  20 53 01		and byte ptr [rbx + 1], dl
 00000228  21 51 04		and dword ptr [rcx + 4], edx
 0000022B  22 53 01		and dl, byte ptr [rbx + 1]
 0000022E  23 51 04		and edx, dword ptr [rcx + 4]

 00000231  3C 11		cmp al, 11h
 00000233  3D 11223344		cmp eax, 11223344h
 00000238  80 FA 11		cmp dl, 11h
 0000023B  81 FA 11223344	cmp edx, 11223344h
 00000241  83 FA 11		cmp edx, 11h
 00000244  38 53 01		cmp byte ptr [rbx + 1], dl
 00000247  39 51 04		cmp dword ptr [rcx + 4], edx
 0000024A  3A 53 01		cmp dl, byte ptr [rbx + 1]
 0000024D  3B 51 04		cmp edx, dword ptr [rcx + 4]

 00000250  0C 11		or al, 11h
 00000252  0D 11223344		or eax, 11223344h
 00000257  80 CA 11		or dl, 11h
 0000025A  81 CA 11223344	or edx, 11223344h
 00000260  83 CA 11		or edx, 11h
 00000263  08 53 01		or byte ptr [rbx + 1], dl
 00000266  09 51 04		or dword ptr [rcx + 4], edx
 00000269  0A 53 01		or dl, byte ptr [rbx + 1]
 0000026C  0B 51 04		or edx, dword ptr [rcx + 4]

 0000026F  2C 11		sub al, 11h
 00000271  2D 11223344		sub eax, 11223344h
 00000276  80 EA 11		sub dl, 11h
 00000279  81 EA 11223344	sub edx, 11223344h
 0000027F  83 EA 11		sub edx, 11h
 00000282  28 53 01		sub byte ptr [rbx + 1], dl
 00000285  29 51 04		sub dword ptr [rcx + 4], edx
 00000288  2A 53 01		sub dl, byte ptr [rbx + 1]
 0000028B  2B 51 04		sub edx, dword ptr [rcx + 4]

 0000028E  34 11		xor al, 11h
 00000290  35 11223344		xor eax, 11223344h
 00000295  80 F2 11		xor dl, 11h
 00000298  81 F2 11223344	xor edx, 11223344h
 0000029E  83 F2 11		xor edx, 11h
 000002A1  30 53 01		xor byte ptr [rbx + 1], dl
 000002A4  31 51 04		xor dword ptr [rcx + 4], edx
 000002A7  32 53 01		xor dl, byte ptr [rbx + 1]
 000002AA  33 51 04		xor edx, dword ptr [rcx + 4]

				;
				; Lea
				;
 000002AD  48/ 8D 06		lea rax, [rsi]
 000002B0  48/ 8D 46 12		lea rax, [rsi + 12h]
 000002B4  48/ 8D 46 EE		lea rax, [rsi - 12h]
 000002B8  48/ 8D 86		lea rax, [rsi + 1234h]
	   00001234
 000002BF  48/ 8D 86		lea rax, [rsi - 1234h]
	   FFFFEDCC
 000002C6  48/ 8D 86		lea rax, [rsi + 12345678h]
	   12345678
 000002CD  48/ 8D 86		lea rax, [rsi - 12345678h]
	   EDCBA988
 000002D4  49/ 8D 2C 24		lea rbp, [r12]
 000002D8  49/ 8D AC 24		lea rbp, [r12 + 87h]
	   00000087
 000002E0  49/ 8D AC 24		lea rbp, [r12 - 789ABCDEh]
	   87654322
 000002E8  48/ 8D 6C 24		lea rbp, [rsp + 20h]
	   20
 000002ED  48/ 8D 65 E0		lea rsp, [rbp - 20h]

				;
				; Mov
				;
 000002F1  8A C1		mov al, cl
 000002F3  66| 8B DA		mov bx, dx
 000002F6  8B F0		mov esi, eax
 000002F8  48/ 8B C3		mov rax, rbx
 000002FB  4D/ 8B C1		mov r8, r9
 000002FE  49/ 8B E4		mov rsp, r12

 00000301  8A 08		mov cl, [rax]
 00000303  8A 59 12		mov bl, [rcx + 12h]
 00000306  44/ 8A 8E		mov r9b, [rsi + 100h]
	   00000100
 0000030D  44/ 8A BF		mov r15b, [rdi + 12345678h]
	   12345678

 00000314  8A 12		mov dl, [rdx]
 00000316  66| 8B 49 12		mov cx, [rcx + 12h]
 0000031A  66| 44/ 8B 8E	mov r9w, [rsi + 1234h]
	   00001234
 00000322  66| 44/ 8B 9F	mov r11w, [rdi + 12345678h]
	   12345678

 0000032A  41/ 8B 21		mov esp, [r9]
 0000032D  8B 51 12		mov edx, [rcx + 12h]
 00000330  8B B6 00001234	mov esi, [rsi + 1234h]
 00000336  44/ 8B 9F		mov r11d, [rdi + 12345678h]
	   12345678

 0000033D  49/ 8B 1C 24		mov rbx, [r12]
 00000341  48/ 8B 79 12		mov rdi, [rcx + 12h]
 00000345  48/ 8B AE		mov rbp, [rsi + 1234h]
	   00001234
 0000034C  4C/ 8B 97		mov r10, [rdi + 12345678h]
	   12345678

				; mov r, imm - register 0 case
 00000353  B0 00		mov al, 0
 00000355  B0 34		mov al, 34h
 00000357  66| B8 0056		mov ax, 56h
 0000035B  66| B8 5678		mov ax, 5678h
 0000035F  B8 00000012		mov eax, 12h
 00000364  B8 00001234		mov eax, 1234h
 00000369  B8 12345678		mov eax, 12345678h
 0000036E  48/ C7 C0		mov rax, 12h
	   00000012
 00000375  48/ C7 C0		mov rax, 1234h
	   00001234
 0000037C  48/ C7 C0		mov rax, 12345678h
	   12345678
 00000383  48/ B8		mov rax, 80000000h
	   0000000080000000
 0000038D  48/ C7 C0		mov rax, -1
	   FFFFFFFF

				; mov r, imm - general purpose register case
 00000394  B3 00		mov bl, 0
 00000396  B3 34		mov bl, 34h
 00000398  41/ B5 34		mov r13b, 34h
 0000039B  66| B9 0056		mov cx, 56h
 0000039F  66| BA 5678		mov dx, 5678h
 000003A3  BD 00000012		mov ebp, 12h
 000003A8  BD 00001234		mov ebp, 1234h
 000003AD  BD 12345678		mov ebp, 12345678h
 000003B2  49/ C7 C4		mov r12, 12h
	   00000012
 000003B9  49/ C7 C4		mov r12, 1234h
	   00001234
 000003C0  49/ C7 C4		mov r12, 12345678h
	   12345678
 000003C7  49/ BC		mov r12, 80000000h
	   0000000080000000
 000003D1  48/ BB		mov rbx, 1234567812345678h
	   1234567812345678
 000003DB  48/ BC		mov rsp, 1234567812345678h
	   1234567812345678
 000003E5  49/ BC		mov r12, 1234567812345678h
	   1234567812345678
				; Test for immediate T*
 000003EF  48/ B8		mov rax, 2234567812345678h
	   2234567812345678


				; mov [r + offset], r with zero, byte, word, and dword offsets
 000003F9  88 08		mov [rax], cl
 000003FB  88 59 12		mov [rcx + 12h], bl
 000003FE  44/ 88 8E		mov [rsi + 100h], r9b
	   00000100
 00000405  44/ 88 BF		mov [rdi + 12345678h], r15b
	   12345678

 0000040C  88 12		mov [rdx], dl
 0000040E  66| 89 49 12		mov [rcx + 12h], cx
 00000412  66| 44/ 89 8E	mov [rsi + 1234h], r9w
	   00001234
 0000041A  66| 44/ 89 9F	mov [rdi + 12345678h], r11w
	   12345678

 00000422  41/ 89 21		mov [r9], esp
 00000425  89 51 12		mov [rcx + 12h], edx
 00000428  89 B6 00001234	mov [rsi + 1234h], esi
 0000042E  44/ 89 9F		mov [rdi + 12345678h], r11d
	   12345678

 00000435  49/ 89 1C 24		mov [r12], rbx
 00000439  48/ 89 79 12		mov [rcx + 12h], rdi
 0000043D  48/ 89 AE		mov [rsi + 1234h], rbp
	   00001234
 00000444  4C/ 89 97		mov [rdi + 12345678h], r10
	   12345678


				;
				; Push/Pop
				;
 0000044B  58			pop rax
 0000044C  5D			pop rbp
 0000044D  41/ 5C		pop r12
 0000044F  53			push rbx
 00000450  55			push rbp
 00000451  41/ 54		push r12

				;
				; Ret
				;
 00000453  C3			ret

 00000454			LL1:
 00000454  74 FE		    jz LL1
 00000456  0F 84 FFFFFFF8	    jz near ptr LL1
 0000045C  74 F6		    jz LL1
 0000045E  0F 84 FFFFFFF0	    jz near ptr LL1
				;    jz far ptr LL1


				;
				; Imul
				;

 00000464  66| 0F AF D9		imul bx, cx
 00000468  0F AF D9		imul ebx, ecx
 0000046B  48/ 0F AF D9		imul rbx, rcx

 0000046F  48/ 0F AF C3		imul rax, rbx;
 00000473  4D/ 0F AF C1		imul r8, r9;
 00000477  66| 0F AF C3		imul ax, bx;

 0000047B  66| 0F AF 49		imul cx, [rcx + 12h]
	   12
 00000480  66| 44/ 0F AF 8E	imul r9w, [rsi + 1234h]
	   00001234
 00000489  66| 44/ 0F AF 9F	imul r11w, [rdi + 12345678h]
	   12345678

 00000492  41/ 0F AF 21		imul esp, [r9]
 00000496  0F AF 51 12		imul edx, [rcx + 12h]
 0000049A  0F AF B6		imul esi, [rsi + 1234h]
	   00001234
 000004A1  44/ 0F AF 9F		imul r11d, [rdi + 12345678h]
	   12345678

 000004A9  49/ 0F AF 1C 24	imul rbx, [r12]
 000004AE  48/ 0F AF 79		imul rdi, [rcx + 12h]
	   12
 000004B3  48/ 0F AF AE		imul rbp, [rsi + 1234h]
	   00001234
 000004BB  4C/ 0F AF 97		imul r10, [rdi + 12345678h]
	   12345678

 000004C3  66| 6B C9 56		imul cx, 56h
 000004C7  66| 69 C9 0080	imul cx, 80h
 000004CC  66| 69 D2 5678	imul dx, 5678h
 000004D1  6B ED 12		imul ebp, 12h
 000004D4  69 ED 00001234	imul ebp, 1234h
 000004DA  69 ED 12345678	imul ebp, 12345678h
 000004E0  4D/ 6B E4 12		imul r12, 12h
 000004E4  4D/ 69 E4		imul r12, 1234h
	   00001234
 000004EB  4D/ 69 E4		imul r12, 12345678h
	   12345678
 000004F2  4D/ 6B E4 FF		imul r12, -1

 000004F6  FF D0		call rax
 000004F8  FF D4		call rsp
 000004FA  FF D5		call rbp
 000004FC  41/ FF D4		call r12
 000004FF  41/ FF D5		call r13

 00000502  48/ B8		mov rax, 07fffffffffffffffh
	   7FFFFFFFFFFFFFFF

 0000050C  66| 48/ 0F 6E C8	movd xmm1, rax
 00000511  66| 48/ 0F 6E C9	movd xmm1, rcx
 00000516  66| 49/ 0F 6E C8	movd xmm1, r8
 0000051B  66| 48/ 0F 6E CD	movd xmm1, rbp
 00000520  66| 49/ 0F 6E CC	movd xmm1, r12

 00000525  66| 48/ 0F 6E C1	movd xmm0, rcx
 0000052A  66| 48/ 0F 6E C9	movd xmm1, rcx
 0000052F  66| 48/ 0F 6E D1	movd xmm2, rcx
 00000534  66| 48/ 0F 6E E9	movd xmm5, rcx
 00000539  66| 4C/ 0F 6E E1	movd xmm12, rcx

 0000053E  66| 0F 6E C8		movd xmm1, eax
 00000542  66| 0F 6E C9		movd xmm1, ecx
 00000546  66| 41/ 0F 6E C8	movd xmm1, r8d
 0000054B  66| 0F 6E CD		movd xmm1, ebp
 0000054F  66| 41/ 0F 6E CC	movd xmm1, r12d

 00000554  66| 0F 6E C1		movd xmm0, ecx
 00000558  66| 0F 6E C9		movd xmm1, ecx
 0000055C  66| 0F 6E D1		movd xmm2, ecx
 00000560  66| 0F 6E E9		movd xmm5, ecx
 00000564  66| 44/ 0F 6E E1	movd xmm12, ecx

				; movss
 00000569  F3/ 0F 10 CA		movss xmm1, xmm2
 0000056D  F3/ 41/ 0F 10 C4	movss xmm0, xmm12
 00000572  F3/ 41/ 0F 10 EC	movss xmm5, xmm12
 00000577  F3/ 0F 10 EB		movss xmm5, xmm3
 0000057B  F3/ 44/ 0F 10 ED	movss xmm13, xmm5
 00000580  F3/ 41/ 0F 10 C7	movss xmm0, xmm15

 00000585  F3/ 41/ 0F 10 04	movss xmm0, dword ptr [r12]
	   24
 0000058B  F3/ 0F 10 61		movss xmm4, dword ptr [rcx + 12h]
	   12
 00000590  F3/ 0F 10 AE		movss xmm5, dword ptr [rsi + 1234h]
	   00001234
 00000598  F3/ 44/ 0F 10 A7	movss xmm12, dword ptr [rdi + 12345678h]
	   12345678

 000005A1  F3/ 41/ 0F 11 04	movss dword ptr [r12], xmm0
	   24
 000005A7  F3/ 0F 11 61		movss dword ptr [rcx + 12h], xmm4
	   12
 000005AC  F3/ 0F 11 AE		movss dword ptr [rsi + 1234h], xmm5
	   00001234
 000005B4  F3/ 44/ 0F 11 A7	movss dword ptr [rdi + 12345678h], xmm12
	   12345678

				; movsd
 000005BD  F2/ 0F 10 CA		movsd xmm1, xmm2
 000005C1  F2/ 41/ 0F 10 C4	movsd xmm0, xmm12
 000005C6  F2/ 41/ 0F 10 EC	movsd xmm5, xmm12
 000005CB  F2/ 0F 10 EB		movsd xmm5, xmm3
 000005CF  F2/ 44/ 0F 10 ED	movsd xmm13, xmm5
 000005D4  F2/ 41/ 0F 10 C7	movsd xmm0, xmm15

 000005D9  F2/ 41/ 0F 10 04	movsd xmm0, qword ptr [r12]
	   24
 000005DF  F2/ 0F 10 61		movsd xmm4, qword ptr [rcx + 12h]
	   12
 000005E4  F2/ 0F 10 AE		movsd xmm5, qword ptr [rsi + 1234h]
	   00001234
 000005EC  F2/ 44/ 0F 10 A7	movsd xmm12, qword ptr [rdi + 12345678h]
	   12345678

 000005F5  F2/ 41/ 0F 11 04	movsd qword ptr [r12], xmm0
	   24
 000005FB  F2/ 0F 11 61		movsd qword ptr [rcx + 12h], xmm4
	   12
 00000600  F2/ 0F 11 AE		movsd qword ptr [rsi + 1234h], xmm5
	   00001234
 00000608  F2/ 44/ 0F 11 A7	movsd qword ptr [rdi + 12345678h], xmm12
	   12345678

 00000611  F2/ 0F 58 CA		addsd xmm1, xmm2
 00000615  F2/ 41/ 0F 58 C4	addsd xmm0, xmm12
 0000061A  F2/ 41/ 0F 59 EC	mulsd xmm5, xmm12
 0000061F  F2/ 0F 59 EB		mulsd xmm5, xmm3
 00000623  F2/ 44/ 0F 5C ED	subsd xmm13, xmm5
 00000628  F2/ 41/ 0F 5C C7	subsd xmm0, xmm15

 0000062D  F2/ 41/ 0F 58 04	addsd xmm0, qword ptr [r12]
	   24
 00000633  F2/ 0F 58 61		addsd xmm4, qword ptr [rcx + 12h]
	   12
 00000638  F2/ 0F 59 AE		mulsd xmm5, qword ptr [rsi + 1234h]
	   00001234
 00000640  F2/ 44/ 0F 5C A7	subsd xmm12, qword ptr [rdi + 12345678h]
	   12345678

 00000649  F3/ 0F 58 CA		addss xmm1, xmm2
 0000064D  F3/ 41/ 0F 58 C4	addss xmm0, xmm12
 00000652  F3/ 41/ 0F 59 EC	mulss xmm5, xmm12
 00000657  F3/ 0F 59 EB		mulss xmm5, xmm3
 0000065B  F3/ 44/ 0F 5C ED	subss xmm13, xmm5
 00000660  F3/ 41/ 0F 5C C7	subss xmm0, xmm15

 00000665  F3/ 41/ 0F 58 04	addss xmm0, dword ptr [r12]
	   24
 0000066B  F3/ 0F 58 61		addss xmm4, dword ptr [rcx + 12h]
	   12
 00000670  F3/ 0F 59 AE		mulss xmm5, dword ptr [rsi + 1234h]
	   00001234
 00000678  F3/ 44/ 0F 5C A7	subss xmm12, dword ptr [rdi + 12345678h]
	   12345678

				;
				; MovZX
				;

				; 1 byte to 2, 4 and 8.
 00000681  66| 0F B6 DB		movzx bx, bl
 00000685  66| 41/ 0F B6 DC	movzx bx, r12b
 0000068A  66| 44/ 0F B6 CA	movzx r9w, dl
 0000068F  66| 0F B6 59		movzx bx, byte ptr [rcx + 12h]
	   12
 00000694  66| 41/ 0F B6 59	movzx bx, byte ptr [r9 + 34h]
	   34

 0000069A  0F B6 DB		movzx ebx, bl
 0000069D  41/ 0F B6 DC		movzx ebx, r12b
 000006A1  44/ 0F B6 CA		movzx r9d, dl
 000006A5  0F B6 59 12		movzx ebx, byte ptr [rcx + 12h]
 000006A9  41/ 0F B6 59		movzx ebx, byte ptr [r9 + 34h]
	   34

 000006AE  48/ 0F B6 DB		movzx rbx, bl
 000006B2  49/ 0F B6 DC		movzx rbx, r12b
 000006B6  4C/ 0F B6 CA		movzx r9, dl
 000006BA  48/ 0F B6 59		movzx rbx, byte ptr [rcx + 12h]
	   12
 000006BF  49/ 0F B6 59		movzx rbx, byte ptr [r9 + 34h]
	   34

				; 2 bytes to 4 and 8
 000006C4  0F B7 DB		movzx ebx, bx
 000006C7  41/ 0F B7 DC		movzx ebx, r12w
 000006CB  44/ 0F B7 CA		movzx r9d, dx
 000006CF  0F B7 59 12		movzx ebx, word ptr [rcx + 12h]
 000006D3  41/ 0F B7 59		movzx ebx, word ptr [r9 + 34h]
	   34

 000006D8  48/ 0F B7 DB		movzx rbx, bx
 000006DC  49/ 0F B7 DC		movzx rbx, r12w
 000006E0  4C/ 0F B7 CA		movzx r9, dx
 000006E4  48/ 0F B7 59		movzx rbx, word ptr [rcx + 12h]
	   12
 000006E9  49/ 0F B7 59		movzx rbx, word ptr [r9 + 34h]
	   34

				; 4 bytes to 8, implemented in terms of mov
 000006EE  8B DB		mov ebx, ebx
 000006F0  41/ 8B DC		mov ebx, r12d
 000006F3  44/ 8B CA		mov r9d, edx
 000006F6  8B 59 12		mov ebx, dword ptr [rcx + 12h]
 000006F9  41/ 8B 59 34		mov ebx, dword ptr [r9 + 34h]

				;
				; MovSX
				;

				; 1 byte to 2, 4 and 8.
 000006FD  66| 0F BE DB		movsx bx, bl
 00000701  66| 41/ 0F BE DC	movsx bx, r12b
 00000706  66| 44/ 0F BE CA	movsx r9w, dl
 0000070B  66| 0F BE 59		movsx bx, byte ptr [rcx + 12h]
	   12
 00000710  66| 41/ 0F BE 59	movsx bx, byte ptr [r9 + 34h]
	   34

 00000716  0F BE DB		movsx ebx, bl
 00000719  41/ 0F BE DC		movsx ebx, r12b
 0000071D  44/ 0F BE CA		movsx r9d, dl
 00000721  0F BE 59 12		movsx ebx, byte ptr [rcx + 12h]
 00000725  41/ 0F BE 59		movsx ebx, byte ptr [r9 + 34h]
	   34

 0000072A  48/ 0F BE DB		movsx rbx, bl
 0000072E  49/ 0F BE DC		movsx rbx, r12b
 00000732  4C/ 0F BE CA		movsx r9, dl
 00000736  48/ 0F BE 59		movsx rbx, byte ptr [rcx + 12h]
	   12
 0000073B  49/ 0F BE 59		movsx rbx, byte ptr [r9 + 34h]
	   34

				; 2 bytes to 4 and 8
 00000740  0F BF DB		movsx ebx, bx
 00000743  41/ 0F BF DC		movsx ebx, r12w
 00000747  44/ 0F BF CA		movsx r9d, dx
 0000074B  0F BF 59 12		movsx ebx, word ptr [rcx + 12h]
 0000074F  41/ 0F BF 59		movsx ebx, word ptr [r9 + 34h]
	   34

 00000754  48/ 0F BF DB		movsx rbx, bx
 00000758  49/ 0F BF DC		movsx rbx, r12w
 0000075C  4C/ 0F BF CA		movsx r9, dx
 00000760  48/ 0F BF 59		movsx rbx, word ptr [rcx + 12h]
	   12
 00000765  49/ 0F BF 59		movsx rbx, word ptr [r9 + 34h]
	   34

				; 4 bytes to 8
 0000076A  48/ 63 DB		movsxd rbx, ebx
 0000076D  49/ 63 DC		movsxd rbx, r12d
 00000770  4C/ 63 CA		movsxd r9, edx
 00000773  48/ 63 59 12		movsxd rbx, dword ptr [rcx + 12h]
 00000777  49/ 63 59 34		movsxd rbx, dword ptr [r9 + 34h]

				;
				; Aligned 128-bit floating point move: movaps and movapd
				;

 0000077B  0F 28 C9		movaps xmm1, xmm1
 0000077E  41/ 0F 28 D1		movaps xmm2, xmm9
 00000782  0F 28 51 20		movaps xmm2, dword ptr [rcx + 20h]
 00000786  41/ 0F 28 91		movaps xmm2, dword ptr [r9 + 200h]
	   00000200
 0000078E  0F 29 51 20		movaps dword ptr [rcx + 20h], xmm2
 00000792  41/ 0F 29 51		movaps dword ptr [r9 + 20h], xmm2
	   20
 00000797  45/ 0F 29 99		movaps dword ptr [r9 + 200h], xmm11
	   00000200

 0000079F  66| 0F 28 C9		movapd xmm1, xmm1
 000007A3  66| 41/ 0F 28 D1	movapd xmm2, xmm9
 000007A8  66| 0F 28 51		movapd xmm2, qword ptr [rcx + 20h]
	   20
 000007AD  66| 41/ 0F 28 91	movapd xmm2, qword ptr [r9 + 200h]
	   00000200
 000007B6  66| 0F 29 51		movapd qword ptr [rcx + 20h], xmm2
	   20
 000007BB  66| 41/ 0F 29 51	movapd qword ptr [r9 + 20h], xmm2
	   20
 000007C1  66| 45/ 0F 29 99	movapd qword ptr [r9 + 200h], xmm11
	   00000200

				;
				; CvtSI2SD/CvtSI2SS
				;

 000007CA  F3/ 0F 2A C8		cvtsi2ss xmm1, eax
 000007CE  F3/ 48/ 0F 2A C8	cvtsi2ss xmm1, rax
 000007D3  F3/ 4C/ 0F 2A CB	cvtsi2ss xmm9, rbx
 000007D8  F3/ 49/ 0F 2A C8	cvtsi2ss xmm1, r8
 000007DD  F3/ 0F 2A 49		cvtsi2ss xmm1, dword ptr [rcx + 12h]
	   12
 000007E2  F3/ 41/ 0F 2A 49	cvtsi2ss xmm1, dword ptr [r9 + 34h]
	   34
 000007E8  F3/ 48/ 0F 2A 49	cvtsi2ss xmm1, qword ptr [rcx + 56h]
	   56

 000007EE  F2/ 0F 2A C8		cvtsi2sd xmm1, eax
 000007F2  F2/ 48/ 0F 2A C8	cvtsi2sd xmm1, rax
 000007F7  F2/ 4C/ 0F 2A CB	cvtsi2sd xmm9, rbx
 000007FC  F2/ 49/ 0F 2A C8	cvtsi2sd xmm1, r8
 00000801  F2/ 0F 2A 49		cvtsi2sd xmm1, dword ptr [rcx + 12h]
	   12
 00000806  F2/ 41/ 0F 2A 49	cvtsi2sd xmm1, dword ptr [r9 + 34h]
	   34
 0000080C  F2/ 48/ 0F 2A 49	cvtsi2sd xmm1, qword ptr [rcx + 56h]
	   56

				;
				; CvtTSD2SI/CvtTSS2SI
				;

 00000812  F3/ 0F 2C C1		cvttss2si eax, xmm1
 00000816  F3/ 48/ 0F 2C C1	cvttss2si rax, xmm1
 0000081B  F3/ 49/ 0F 2C D9	cvttss2si rbx, xmm9
 00000820  F3/ 4C/ 0F 2C C1	cvttss2si r8, xmm1
 00000825  F3/ 0F 2C 59		cvttss2si ebx, dword ptr [rcx + 12h]
	   12
 0000082A  F3/ 41/ 0F 2C 59	cvttss2si ebx, dword ptr [r9 + 34h]
	   34
 00000830  F3/ 48/ 0F 2C 59	cvttss2si rbx, dword ptr [rcx + 56h]
	   56

 00000836  F2/ 0F 2C C1		cvttsd2si eax, xmm1
 0000083A  F2/ 48/ 0F 2C C1	cvttsd2si rax, xmm1
 0000083F  F2/ 49/ 0F 2C D9	cvttsd2si rbx, xmm9
 00000844  F2/ 4C/ 0F 2C C1	cvttsd2si r8, xmm1
 00000849  F2/ 0F 2C 59		cvttsd2si ebx, qword ptr [rcx + 12h]
	   12
 0000084E  F2/ 41/ 0F 2C 59	cvttsd2si ebx, qword ptr [r9 + 34h]
	   34
 00000854  F2/ 48/ 0F 2C 59	cvttsd2si rbx, qword ptr [rcx + 56h]
	   56

				;
				; Conversion, float - cvtss2sd and cvtsd2ss
				;

 0000085A  F3/ 0F 5A C9		cvtss2sd xmm1, xmm1
 0000085E  F3/ 41/ 0F 5A D1	cvtss2sd xmm2, xmm9
 00000863  F3/ 0F 5A 51		cvtss2sd xmm2, dword ptr [rcx + 20h]
	   20
 00000868  F3/ 41/ 0F 5A 91	cvtss2sd xmm2, dword ptr [r9 + 200h]
	   00000200

 00000871  F2/ 0F 5A C9		cvtsd2ss xmm1, xmm1
 00000875  F2/ 41/ 0F 5A D1	cvtsd2ss xmm2, xmm9
 0000087A  F2/ 0F 5A 51		cvtsd2ss xmm2, qword ptr [rcx + 20h]
	   20
 0000087F  F2/ 41/ 0F 5A 91	cvtsd2ss xmm2, qword ptr [r9 + 200h]
	   00000200

				;
				; Floating point comparison, comiss and comisd.
				;

 00000888  0F 2F C9		comiss xmm1, xmm1
 0000088B  41/ 0F 2F D1		comiss xmm2, xmm9
 0000088F  0F 2F 51 20		comiss xmm2, dword ptr [rcx + 20h]
 00000893  41/ 0F 2F 91		comiss xmm2, dword ptr [r9 + 200h]
	   00000200

 0000089B  66| 0F 2F C9		comisd xmm1, xmm1
 0000089F  66| 41/ 0F 2F D1	comisd xmm2, xmm9
 000008A4  66| 0F 2F 51		comisd xmm2, qword ptr [rcx + 20h]
	   20
 000008A9  66| 41/ 0F 2F 91	comisd xmm2, qword ptr [r9 + 200h]
	   00000200

				;
				; Shift/rotate
				;

 000008B2  D2 C0		rol al, cl
 000008B4  D3 E3		shl ebx, cl
 000008B6  49/ D3 EC		shr r12, cl

 000008B9  48/ C1 C0 03		rol rax, 3
 000008BD  C0 E3 04		shl bl, 4
 000008C0  41/ C1 EC 05		shr r12d, 5

 000008C4  66| 0F A4 D8		shld ax, bx, 11
	   0B
 000008C9  0F A4 F2 18		shld edx, esi, 24
 000008CD  49/ 0F A4 EC		shld r12, rbp, 43
	   2B
 000008D2  4C/ 0F A4 E5		shld rbp, r12, 43
	   2B

 000008D7  66| 0F A5 D8		shld ax, bx, cl
 000008DB  0F A5 F2		shld edx, esi, cl
 000008DE  49/ 0F A5 EC		shld r12, rbp, cl
 000008E2  4C/ 0F A5 E5		shld rbp, r12, cl

 000008E6			main ENDP

				END
